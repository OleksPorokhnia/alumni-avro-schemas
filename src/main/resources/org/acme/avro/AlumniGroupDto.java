/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.acme.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AlumniGroupDto extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1809709101387600349L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AlumniGroupDto\",\"namespace\":\"org.acme.avro\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"faculty\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"group_number\",\"type\":\"int\"},{\"name\":\"graduation_year\",\"type\":\"int\"},{\"name\":\"speciality_name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AlumniGroupDto> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AlumniGroupDto> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AlumniGroupDto> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AlumniGroupDto> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AlumniGroupDto> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AlumniGroupDto to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AlumniGroupDto from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AlumniGroupDto instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AlumniGroupDto fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private int id;
  private java.lang.String faculty;
  private int group_number;
  private int graduation_year;
  private java.lang.String speciality_name;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AlumniGroupDto() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param faculty The new value for faculty
   * @param group_number The new value for group_number
   * @param graduation_year The new value for graduation_year
   * @param speciality_name The new value for speciality_name
   */
  public AlumniGroupDto(java.lang.Integer id, java.lang.String faculty, java.lang.Integer group_number, java.lang.Integer graduation_year, java.lang.String speciality_name) {
    this.id = id;
    this.faculty = faculty;
    this.group_number = group_number;
    this.graduation_year = graduation_year;
    this.speciality_name = speciality_name;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return faculty;
    case 2: return group_number;
    case 3: return graduation_year;
    case 4: return speciality_name;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: faculty = value$ != null ? value$.toString() : null; break;
    case 2: group_number = (java.lang.Integer)value$; break;
    case 3: graduation_year = (java.lang.Integer)value$; break;
    case 4: speciality_name = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public int getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(int value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'faculty' field.
   * @return The value of the 'faculty' field.
   */
  public java.lang.String getFaculty() {
    return faculty;
  }


  /**
   * Sets the value of the 'faculty' field.
   * @param value the value to set.
   */
  public void setFaculty(java.lang.String value) {
    this.faculty = value;
  }

  /**
   * Gets the value of the 'group_number' field.
   * @return The value of the 'group_number' field.
   */
  public int getGroupNumber() {
    return group_number;
  }


  /**
   * Sets the value of the 'group_number' field.
   * @param value the value to set.
   */
  public void setGroupNumber(int value) {
    this.group_number = value;
  }

  /**
   * Gets the value of the 'graduation_year' field.
   * @return The value of the 'graduation_year' field.
   */
  public int getGraduationYear() {
    return graduation_year;
  }


  /**
   * Sets the value of the 'graduation_year' field.
   * @param value the value to set.
   */
  public void setGraduationYear(int value) {
    this.graduation_year = value;
  }

  /**
   * Gets the value of the 'speciality_name' field.
   * @return The value of the 'speciality_name' field.
   */
  public java.lang.String getSpecialityName() {
    return speciality_name;
  }


  /**
   * Sets the value of the 'speciality_name' field.
   * @param value the value to set.
   */
  public void setSpecialityName(java.lang.String value) {
    this.speciality_name = value;
  }

  /**
   * Creates a new AlumniGroupDto RecordBuilder.
   * @return A new AlumniGroupDto RecordBuilder
   */
  public static org.acme.avro.AlumniGroupDto.Builder newBuilder() {
    return new org.acme.avro.AlumniGroupDto.Builder();
  }

  /**
   * Creates a new AlumniGroupDto RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AlumniGroupDto RecordBuilder
   */
  public static org.acme.avro.AlumniGroupDto.Builder newBuilder(org.acme.avro.AlumniGroupDto.Builder other) {
    if (other == null) {
      return new org.acme.avro.AlumniGroupDto.Builder();
    } else {
      return new org.acme.avro.AlumniGroupDto.Builder(other);
    }
  }

  /**
   * Creates a new AlumniGroupDto RecordBuilder by copying an existing AlumniGroupDto instance.
   * @param other The existing instance to copy.
   * @return A new AlumniGroupDto RecordBuilder
   */
  public static org.acme.avro.AlumniGroupDto.Builder newBuilder(org.acme.avro.AlumniGroupDto other) {
    if (other == null) {
      return new org.acme.avro.AlumniGroupDto.Builder();
    } else {
      return new org.acme.avro.AlumniGroupDto.Builder(other);
    }
  }

  /**
   * RecordBuilder for AlumniGroupDto instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AlumniGroupDto>
    implements org.apache.avro.data.RecordBuilder<AlumniGroupDto> {

    private int id;
    private java.lang.String faculty;
    private int group_number;
    private int graduation_year;
    private java.lang.String speciality_name;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.acme.avro.AlumniGroupDto.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.faculty)) {
        this.faculty = data().deepCopy(fields()[1].schema(), other.faculty);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.group_number)) {
        this.group_number = data().deepCopy(fields()[2].schema(), other.group_number);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.graduation_year)) {
        this.graduation_year = data().deepCopy(fields()[3].schema(), other.graduation_year);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.speciality_name)) {
        this.speciality_name = data().deepCopy(fields()[4].schema(), other.speciality_name);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing AlumniGroupDto instance
     * @param other The existing instance to copy.
     */
    private Builder(org.acme.avro.AlumniGroupDto other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.faculty)) {
        this.faculty = data().deepCopy(fields()[1].schema(), other.faculty);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.group_number)) {
        this.group_number = data().deepCopy(fields()[2].schema(), other.group_number);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.graduation_year)) {
        this.graduation_year = data().deepCopy(fields()[3].schema(), other.graduation_year);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.speciality_name)) {
        this.speciality_name = data().deepCopy(fields()[4].schema(), other.speciality_name);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public int getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public org.acme.avro.AlumniGroupDto.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public org.acme.avro.AlumniGroupDto.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'faculty' field.
      * @return The value.
      */
    public java.lang.String getFaculty() {
      return faculty;
    }


    /**
      * Sets the value of the 'faculty' field.
      * @param value The value of 'faculty'.
      * @return This builder.
      */
    public org.acme.avro.AlumniGroupDto.Builder setFaculty(java.lang.String value) {
      validate(fields()[1], value);
      this.faculty = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'faculty' field has been set.
      * @return True if the 'faculty' field has been set, false otherwise.
      */
    public boolean hasFaculty() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'faculty' field.
      * @return This builder.
      */
    public org.acme.avro.AlumniGroupDto.Builder clearFaculty() {
      faculty = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'group_number' field.
      * @return The value.
      */
    public int getGroupNumber() {
      return group_number;
    }


    /**
      * Sets the value of the 'group_number' field.
      * @param value The value of 'group_number'.
      * @return This builder.
      */
    public org.acme.avro.AlumniGroupDto.Builder setGroupNumber(int value) {
      validate(fields()[2], value);
      this.group_number = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'group_number' field has been set.
      * @return True if the 'group_number' field has been set, false otherwise.
      */
    public boolean hasGroupNumber() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'group_number' field.
      * @return This builder.
      */
    public org.acme.avro.AlumniGroupDto.Builder clearGroupNumber() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'graduation_year' field.
      * @return The value.
      */
    public int getGraduationYear() {
      return graduation_year;
    }


    /**
      * Sets the value of the 'graduation_year' field.
      * @param value The value of 'graduation_year'.
      * @return This builder.
      */
    public org.acme.avro.AlumniGroupDto.Builder setGraduationYear(int value) {
      validate(fields()[3], value);
      this.graduation_year = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'graduation_year' field has been set.
      * @return True if the 'graduation_year' field has been set, false otherwise.
      */
    public boolean hasGraduationYear() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'graduation_year' field.
      * @return This builder.
      */
    public org.acme.avro.AlumniGroupDto.Builder clearGraduationYear() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'speciality_name' field.
      * @return The value.
      */
    public java.lang.String getSpecialityName() {
      return speciality_name;
    }


    /**
      * Sets the value of the 'speciality_name' field.
      * @param value The value of 'speciality_name'.
      * @return This builder.
      */
    public org.acme.avro.AlumniGroupDto.Builder setSpecialityName(java.lang.String value) {
      validate(fields()[4], value);
      this.speciality_name = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'speciality_name' field has been set.
      * @return True if the 'speciality_name' field has been set, false otherwise.
      */
    public boolean hasSpecialityName() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'speciality_name' field.
      * @return This builder.
      */
    public org.acme.avro.AlumniGroupDto.Builder clearSpecialityName() {
      speciality_name = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AlumniGroupDto build() {
      try {
        AlumniGroupDto record = new AlumniGroupDto();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.faculty = fieldSetFlags()[1] ? this.faculty : (java.lang.String) defaultValue(fields()[1]);
        record.group_number = fieldSetFlags()[2] ? this.group_number : (java.lang.Integer) defaultValue(fields()[2]);
        record.graduation_year = fieldSetFlags()[3] ? this.graduation_year : (java.lang.Integer) defaultValue(fields()[3]);
        record.speciality_name = fieldSetFlags()[4] ? this.speciality_name : (java.lang.String) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AlumniGroupDto>
    WRITER$ = (org.apache.avro.io.DatumWriter<AlumniGroupDto>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AlumniGroupDto>
    READER$ = (org.apache.avro.io.DatumReader<AlumniGroupDto>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.id);

    out.writeString(this.faculty);

    out.writeInt(this.group_number);

    out.writeInt(this.graduation_year);

    out.writeString(this.speciality_name);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readInt();

      this.faculty = in.readString();

      this.group_number = in.readInt();

      this.graduation_year = in.readInt();

      this.speciality_name = in.readString();

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readInt();
          break;

        case 1:
          this.faculty = in.readString();
          break;

        case 2:
          this.group_number = in.readInt();
          break;

        case 3:
          this.graduation_year = in.readInt();
          break;

        case 4:
          this.speciality_name = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










